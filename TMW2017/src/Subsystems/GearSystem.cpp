// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "CANTalon.h"


#include "GearSystem.h"
#include "../RobotMap.h"

using namespace frc;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

GearSystem::GearSystem() : Subsystem("GearSystem") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    gearPickUp = RobotMap::gearSystemGearPickUp;
    lift = RobotMap::gearSystemLift;
    rotate = RobotMap::gearSystemRotate;
    extend = RobotMap::gearSystemExtend;
    squeeze = RobotMap::gearSystemSqueeze;
    gearCompressor = RobotMap::gearSystemGearCompressor;
    pressureGauge = RobotMap::gearSystemPressureGauge;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    gearPickUp->ConfigNeutralMode(CANSpeedController::kNeutralMode_Brake);
}

void GearSystem::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void GearSystem::SetGearBarSpeed(double speed) {
	gearPickUp->Set(speed);
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void GearSystem::Run() {

}

void GearSystem::ToggleLift() {
	lift->Set(!lift->Get());
}
void GearSystem::ToggleRotate() {
	rotate->Set(!rotate->Get());
}
void GearSystem::ToggleExtend() {
	extend->Set(!extend->Get());
}
void GearSystem::ToggleSqueeze() {
	DoubleSolenoid::Value currentValue = squeeze->Get();
	if (DoubleSolenoid::kOff == currentValue  || DoubleSolenoid::kReverse == currentValue) {
		squeeze->Set(DoubleSolenoid::kForward);
	} else {
		squeeze->Set(DoubleSolenoid::kReverse);
	}
}

void GearSystem::SMDB() {
	frc::SmartDashboard::PutNumber("GearPickup Volts", gearPickUp->GetOutputVoltage());
	frc::SmartDashboard::PutNumber("GearPickup Amps", gearPickUp->GetOutputCurrent());
	frc::SmartDashboard::PutNumber("Pressure Gauge",
			pressureGauge->GetAverageVoltage() * 40); 	// 0 to 5 0 to 200
}
