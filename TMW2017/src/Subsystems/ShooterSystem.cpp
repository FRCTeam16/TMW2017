// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "CANTalon.h"
#include "Manager.h"

#include "ShooterSystem.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

ShooterSystem::ShooterSystem() : Subsystem("ShooterSystem") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    elevator = RobotMap::shooterSystemElevator;
    hopper = RobotMap::shooterSystemHopper;
    shooter1 = RobotMap::shooterSystemShooter1;
    shooter2 = RobotMap::shooterSystemShooter2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    elevator->ConfigNeutralMode(CANSpeedController::kNeutralMode_Coast);
    hopper->ConfigNeutralMode(CANSpeedController::kNeutralMode_Coast);
    shooter1->ConfigNeutralMode(CANSpeedController::kNeutralMode_Coast);
    shooter2->ConfigNeutralMode(CANSpeedController::kNeutralMode_Coast);

    Preferences *prefs = Preferences::GetInstance();
    const double P = prefs->GetFloat("ShootP", 2);
    const double I = prefs->GetFloat("ShootI", 0);
    const double D = prefs->GetFloat("ShootD", 0);

    shooter1->SetControlMode(CANSpeedController::kSpeed);
    shooter1->SetFeedbackDevice(CANTalon::FeedbackDevice::CtreMagEncoder_Relative);
    shooter1->SetPID(P, I, D);
    shooter1->ConfigPeakOutputVoltage(12.0, 0.0);
    // We assume shooter2 is configured to be slaved to shooter1 via CANTalon configuration
}

void ShooterSystem::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void ShooterSystem::Run() {
	hopper->Set(hopperSpeed);
	elevator->Set(elevatorSpeed);

	if (shooterEnabled) {
		const double shooterSpeedRpm = Preferences::GetInstance()->GetDouble("ShootRPM", 13000);
		std::cout << "ShooterSystem::Shoot() => " << shooterSpeedRpm << " RPM ... Shoot now!\n";
		shooter1->SetSetpoint(shooterSpeedRpm);
	} else {
		shooter1->SetSetpoint(0);
	}
}

void ShooterSystem::InitManager() {
	DisableElevator();
	DisableHopper();
	SetShooterEnabled(false);
}


void ShooterSystem::SetShooterEnabled(bool enabled) {
	shooterEnabled = enabled;
}

void ShooterSystem::EnableHopper(double speed) {
	hopperSpeed = speed;
}

void ShooterSystem::DisableHopper() {
	hopperSpeed = 0.0;
}

void ShooterSystem::EnableElevator(double speed) {
	elevatorSpeed = speed;
}

void ShooterSystem::DisableElevator() {
	elevatorSpeed = 0.0;
}
