// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "CANTalon.h"
#include "Manager.h"

#include "ShooterSystem.h"
#include "../RobotMap.h"
#include <Robot.h>
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

ShooterSystem::ShooterSystem() : Subsystem("ShooterSystem") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    elevator = RobotMap::shooterSystemElevator;
    hopper = RobotMap::shooterSystemHopper;
    shooter1 = RobotMap::shooterSystemShooter1;
    shooter2 = RobotMap::shooterSystemShooter2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    elevator->ConfigNeutralMode(CANSpeedController::kNeutralMode_Coast);
    hopper->ConfigNeutralMode(CANSpeedController::kNeutralMode_Coast);
    shooter1->ConfigNeutralMode(CANSpeedController::kNeutralMode_Coast);
    shooter2->ConfigNeutralMode(CANSpeedController::kNeutralMode_Coast);

    Preferences *prefs = Preferences::GetInstance();
    const double P = prefs->GetDouble("ShootP", 0);
    const double I = prefs->GetDouble("ShootI", 0);
    const double D = prefs->GetDouble("ShootD", 0);
    const double F = prefs->GetDouble("ShootF", 0.035);
    shooterRPM = prefs->GetDouble("ShootRPM");
    const uint32_t shootAveraging = prefs->GetInt("ShootAveraging", 100);

    if (!prefs->ContainsKey("ShootP")) {
    	prefs->PutDouble("ShootP", P);
    }
    if (!prefs->ContainsKey("ShootI")) {
		prefs->PutDouble("ShootI", I);
	}
    if (!prefs->ContainsKey("ShootD")) {
		prefs->PutDouble("ShootD", D);
	}
    if (!prefs->ContainsKey("ShootF")) {
		prefs->PutDouble("ShootF", F);
	}
    if (!prefs->ContainsKey("ShootRPM")) {
		prefs->PutDouble("ShootRPM", shooterRPM);
	}
    if (!prefs->ContainsKey("ShootAveraging")) {
    	prefs->PutInt("ShootAveraging", shootAveraging);
    }


    shooter1->SetControlMode(CANSpeedController::kSpeed);
    shooter1->SetFeedbackDevice(CANTalon::FeedbackDevice::CtreMagEncoder_Relative);
    shooter1->SetPID(P, I, D, F);
    shooter1->ConfigPeakOutputVoltage(0.0, -12.0);
    shooter1->SetVelocityMeasurementWindow(shootAveraging);

    shooter2->SetControlMode(CANSpeedController::kFollower);
    shooter2->Set(shooter1->GetDeviceID());
}

void ShooterSystem::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void ShooterSystem::Run() {
	Preferences *prefs = Preferences::GetInstance();
	double hopperSpeedToSet = 0.0;
	double shooterSetPoint = 0.0;
	double elevatorSpeedToSet = 0.0;

	const double firingHopperSpeed = prefs->GetDouble("Hopper Shoot Speed");
	const double reverseHopperSpeed = -1 * firingHopperSpeed;



	if (shooterMotorsEnabled) {

		RobotMap::shootingLight->Set(false);

		const double shooterSpeedRpm = prefs->GetDouble("ShootRPM", 3000);
	    const double P = prefs->GetDouble("ShootP", 0);
	    const double I = prefs->GetDouble("ShootI", 0);
	    const double D = prefs->GetDouble("ShootD", 0);
	    const double F = prefs->GetDouble("ShootF", 0.035);
	    shooter1->SetPID(P, I, D, F);

	    ControlShooterRamp();

	    const uint32_t shootAveraging = prefs->GetInt("ShootAveraging", 100);
	    shooter1->SetVelocityMeasurementWindow(shootAveraging);

	    shooterSetPoint = shooterSpeedRpm * -1.0;

		if (fireEnabled || CheckPulsingBallLoad()) {
			if (inElevatorRampUp) {
				if (elevatorRampUp-- <= 0) {
					inElevatorRampUp = false;
				}
			} else {
				hopperSpeedToSet = firingHopperSpeed;
			}
			elevatorSpeedToSet = elevatorSpeed;
		}

		if (reverseHopper) {
			if (--reverseHopperCountdownTimer == 0) {
				reverseHopper = false;
			} else {
				hopperSpeedToSet = reverseHopperSpeed;
			}
		}
	} else {
		hopperSpeedToSet = hopperSpeed;
		RobotMap::shootingLight->Set(true);
	}

	shooter1->SetSetpoint(shooterSetPoint);
	hopper->Set(hopperSpeedToSet);
	elevator->Set(elevatorSpeedToSet);
}

void ShooterSystem::PulseBallLoad(int countdownScansStart) {
	pulseBallLoadCountdown = countdownScansStart;
}

void ShooterSystem::TriggerShooterRamp(int countdownScansStart) {
	shooterRampCountdown = countdownScansStart;
	shooter1->SetVoltageRampRate(24);
}

void ShooterSystem::ControlShooterRamp() {
	if (shooterRampCountdown > 0) {
		if (--shooterRampCountdown == 0) {
		    shooter1->SetVoltageRampRate(0);
		}
	}
}

bool ShooterSystem::CheckPulsingBallLoad() {
	if (pulseBallLoadCountdown > 0) {
		pulseBallLoadCountdown--;
		return true;
	} else {
		return false;
	}
}

void ShooterSystem::SMDB() {
	frc::SmartDashboard::PutNumber("ShootRPM", shooter1->Get());
	frc::SmartDashboard::PutNumber("Shooter Amps", shooter1->GetOutputCurrent());
	frc::SmartDashboard::PutNumber("Hopper Amps", hopper->GetOutputCurrent());

	reverseHopperCountDownTimerStartValue = frc::SmartDashboard::GetNumber("Hopper Reverse Start", 15);
	frc::SmartDashboard::PutNumber("Hopper Reverse Start", reverseHopperCountDownTimerStartValue);

	elevatorSpeed = frc::SmartDashboard::GetNumber("Elevator Speed", -1.0);
	frc::SmartDashboard::PutNumber("Elevator Speed", elevatorSpeed);

	elevatorRampUpStartValue = frc::SmartDashboard::GetNumber("Elevator Rampup Start", 5);
	frc::SmartDashboard::PutNumber("Elevator Rampup Start", elevatorRampUpStartValue);
}


void ShooterSystem::InitManager(Manager::RunMode runMode) {
	SetHopperSpeed(0.0);
	SetFireEnabled(false);
	shooterMotorsEnabled = false;
	reverseHopper = false;
}


void ShooterSystem::SetFireEnabled(bool enabled) {
	if (fireEnabled && !enabled) {
		// Turning off shooter
		PulseHopperReverse();
		inElevatorRampUp = false;
		if (automaticRotateState == false) {
			Robot::gearSystem->DropPickupForShooting(false);
		}
	}
	if (!fireEnabled && enabled) {
		// Turning on shooter
		inElevatorRampUp = true;
		elevatorRampUp = elevatorRampUpStartValue;
		automaticRotateState = Robot::gearSystem->IsRotateEnabled();
		if (automaticRotateState == false) {
			Robot::gearSystem->DropPickupForShooting(true);
		}
	}
	fireEnabled = enabled;
}

void ShooterSystem::ToggleShooter() {
	SetShooterEnabled(!shooterMotorsEnabled);
}

void ShooterSystem::SetShooterEnabled(bool enabled, bool doLoad) {
	if (enabled) {
		TriggerShooterRamp();
		if (doLoad) {
			PulseBallLoad();
		}
	}
	shooterMotorsEnabled = enabled;
}

void ShooterSystem::SetHopperSpeed(double speed) {
	hopperSpeed = speed;
}

void ShooterSystem::PulseHopperReverse() {
	reverseHopper = true;
	reverseHopperCountdownTimer = reverseHopperCountDownTimerStartValue;
}
